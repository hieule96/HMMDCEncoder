#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Nov  3 15:57:58 2022

@author: ubuntu
"""

from scipy.optimize import LinearConstraint,NonlinearConstraint,minimize
import numpy as np

aki = np.array([0.25,0.34,0.36,0.87])
RT = 1.0
a = np.array([1,1,1,1])
b = np.array([0.25,0.25,0.25,0.25])
c = np.array([0.5,0.5,0.5,0.5])
d = np.array([8,8,8,8])
Ci = [0.1,1,0.1,1]
def exponential_function2(x,a,b,c,d):
    return a*np.exp(b*x)+c*np.exp(d*x)
def derivateExp2(x,a,b,c,d):
    return a*b*np.exp(b*x) + c*d*np.exp(d*x)
def derivatederivateExp2(x,a,b,c,d):
    return a*b**2*np.exp(b*x) + c*d**2*np.exp(d*x)
def cons_f(r,a,b,c,d,aki):
    return np.dot(aki,exponential_function2(r,a,b,c,d))
def cons_J(r,a,b,c,d,aki):
    return derivateExp2(r,a,b,c,d)
def cons_H(r,v,a,b,c,d,aki):
    firsterm = aki[0]*derivatederivateExp2(r[0],a[0],b[0],c[0],d[0])
    secondterm = derivateExp2(r[1:],a[1:],b[1:],c[1:],d[1:])
    return v[0]*np.hstack((firsterm,secondterm))

def cost_func(r,lam,aki,a,b,c,d,Ci,mu,Dm,Rt,rN):
    Di = aki*exponential_function2(r,a,b,c,d)
    Dcost = np.sum(Ci*Di)
    Dtotal = np.sum(Di)
    R = np.dot(aki,r)
    cost = Dcost + lam*(R-Rt) + mu*((np.abs(Dtotal-Dm) + (Dtotal-Dm))/2)**2
    return cost

def grad_func(r,lam,aki,a,b,c,d,Ci,mu,Dm,Rt,rN):
    #pdb.set_trace()
    Di = aki*exponential_function2(r,a,b,c,d)
    Dtotal = np.sum(Di)
    Diprime = aki*derivateExp2(r,a,b,c,d)
    Riprime = aki
    E = 2*(np.abs(Dtotal-Dm) + (Dtotal-Dm))
    grad = Ci*Diprime + lam * Riprime + mu*E*Diprime
    return grad
linear_constraint = LinearConstraint(aki.T,[-np.inf],[RT/2])
nonlinear_constraint = NonlinearConstraint(lambda x:cons_f(x,a,b,c,d,aki),-np.inf,200,jac=lambda x:cons_J(x,a,b,c,d,aki),hess=lambda x,v:cons_H(x,v,a,b,c,d,aki))


x0 = np.array([0.5,0.5,0.5,0.5])
res = minimize(cost_func, x0, method='trust-constr', jac=grad_func,
               constraints=[linear_constraint, nonlinear_constraint],
               options={'verbose': 1},args=(0.5,aki,a,b,c,d,Ci,0.5,200,0.5,0.0))